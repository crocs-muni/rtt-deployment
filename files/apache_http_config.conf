<VirtualHost *:80>
	# The ServerName directive sets the request scheme, hostname and port that
	# the server uses to identify itself. This is used when creating
	# redirection URLs. In the context of virtual hosts, the ServerName
	# specifies what hostname must appear in the request's Host: header to
	# match this virtual host. For the default virtual host (this file) this
	# value is not decisive as it is used as a last resort host regardless.
	# However, you must set it for any further virtual host explicitly.
	# ServerName rtt.ics.muni.cz

	ServerAdmin webmaster@localhost
	DocumentRoot /var/www/html

	# Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
	# error, crit, alert, emerg.
	# It is also possible to configure the loglevel for particular
	# modules, e.g.
	#LogLevel info ssl:warn

	ErrorLog ${APACHE_LOG_DIR}/error.log
	CustomLog ${APACHE_LOG_DIR}/access.log combined

	# For most configuration files from conf-available/, which are
	# enabled or disabled at a global level, it is possible to
	# include a line for only one particular virtual host. For example the
	# following line enables the CGI configuration for this host only
	# after it has been globally disabled with "a2disconf".
	#Include conf-available/serve-cgi-bin.conf

    Alias /.well-known/acme-challenge /var/www/html/.well-known/acme-challenge/
    <Directory "/var/www/html/.well-known/acme-challenge/">
        Options None
        AllowOverride None
        ForceType text/plain
        Require all granted
        #RedirectMatch 404 "^(?!/\.well-known/acme-challenge/[\w-]{43}$)"
	</Directory>

	Alias /static /home/RTTWebInterface/static
	<Directory /home/RTTWebInterface/static>
		Require all granted
	</Directory>

	<Directory /home/RTTWebInterface/RTTWebInterface>
		<Files wsgi.py>
			Require all granted
		</Files>
	</Directory>

	WSGIDaemonProcess RTTWebInterface python-path=/home/RTTWebInterface python-home=/home/RTTWebInterface/RTTWebInterfaceEnv
	WSGIProcessGroup RTTWebInterface

	# https://serverfault.com/questions/514242/non-responsive-apache-mod-wsgi-after-installing-scipy/514251#514251
	# https://code.google.com/archive/p/modwsgi/wikis/ApplicationIssues.wiki#Python_Simplified_GIL_State_API
	#
	# Some third party packages for Python which use C extension modules, and this includes scipy and numpy, will only
	# work in the Python main interpreter and cannot be used in sub interpreters as mod_wsgi by default uses.
	# The result can be thread deadlock, incorrect behaviour or processes crashes.
	#
    # The workaround is to force the WSGI application to run in the main interpreter of the process using: WSGIApplicationGroup %{GLOBAL}
    #
    # If running multiple WSGI applications on same server, you would want to start investigating using daemon mode
    # because some frameworks don't allow multiple instances to run in same interpreter. This is the case with Django.
    # Thus use daemon mode so each is in its own process and force each to run in main interpreter of their respective
    # daemon mode process groups.
	WSGIApplicationGroup %{GLOBAL}
	WSGIScriptAlias / /home/RTTWebInterface/RTTWebInterface/wsgi.py

</VirtualHost>